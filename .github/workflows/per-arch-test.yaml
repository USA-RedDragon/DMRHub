name: Per-architecture test

on:
  pull_request:

jobs:
  frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: make build-frontend

      - uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: internal/http/frontend/dist
          if-no-files-found: error
          retention-days: 1

  test-linux:
    name: Test Linux
    needs: frontend
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux]
        goarch: ["386", arm, amd64, arm64, riscv64]
    steps:
      - uses: actions/checkout@v3
      - name: Copy built frontend
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: internal/http/frontend/dist

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"

      - run: docker run --privileged --rm tonistiigi/binfmt --install all

      - run: go install github.com/tinylib/msgp

      - run: make build-ci && make test
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

  test-macos:
    name: Test MacOS
    needs: frontend
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [darwin]
        goarch: [amd64]
    steps:
      - uses: actions/checkout@v3
      - name: Copy built frontend
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: internal/http/frontend/dist

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"

      - run: go install github.com/tinylib/msgp

      - run: make build-ci && make test
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

  test-windows:
    name: Test Windows
    needs: frontend
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [windows]
        goarch: ["386", amd64]
    steps:
      - uses: actions/checkout@v3
      - name: Copy built frontend
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: internal/http/frontend/dist

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"

      - run: go install github.com/tinylib/msgp

      - run: make build-ci && make test
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

  test-bsd:
    name: Test BSD
    needs: frontend
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: freebsd
            architecture: x86-64
            version: "13.1"

          - name: netbsd
            architecture: x86-64
            version: "9.2"

          - name: openbsd
            architecture: x86-64
            version: "7.2"

          - name: openbsd
            architecture: arm64
            version: "7.2"

    steps:
      - uses: actions/checkout@v3

      - name: Copy built frontend
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: internal/http/frontend/dist

      - name: Test on ${{ matrix.os.name }}
        uses: cross-platform-actions/action@master
        env:
          GO_SRC: https://go.dev/dl/go1.20.src.tar.gz
        with:
          environment_variables: GO_SRC
          operating_system: ${{ matrix.os.name }}
          architecture: ${{ matrix.os.architecture }}
          version: ${{ matrix.os.version }}
          shell: bash
          run: |
            pkg add curl
            curl -o go.tgz ${GO_SRC}
            tar xvf go.tgz
